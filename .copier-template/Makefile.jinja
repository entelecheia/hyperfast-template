# To do stuff with make, you type `make` in a directory that has a file called
# "Makefile".  You can also type `make -f <makefile>` to use a different filename.
#
# A Makefile is a collection of rules. Each rule is a recipe to do a specific
# thing, sort of like a grunt task or an npm package.json script.
#
# A rule looks like this:
#
# <target>: <prerequisites...>
# 	<commands>
#
# The "target" is required. The prerequisites are optional, and the commands
# are also optional, but you have to have one or the other.
#
# Type `make` to show the available targets and a description of each.
#
.DEFAULT_GOAL := help
.PHONY: help
help:  ## Display this help
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n"} /^[a-zA-Z_-]+:.*?##/ { printf "  \033[36m%-25s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

##@ Clean-up

clean-docs-build: ## remove output files from mkdocs
	@rm -rf site

clean: clean-docs-build ## run all clean commands

##@ Releases

verify-release: ## verify release
	@npx semantic-release --verfiy-release

##@ Build

.PHONY: build
build: ## build the project
	@npm run build

##@ Setup

install: ## install dependencies
	@npm install

install-node: ## install node
	@export NVM_DIR="$${HOME}/.nvm"; \
	[ -s "$${NVM_DIR}/nvm.sh" ] && . "$${NVM_DIR}/nvm.sh"; \
	nvm install --lts

nvm-ls: ## list node versions
	@export NVM_DIR="$${HOME}/.nvm"; \
	[ -s "$${NVM_DIR}/nvm.sh" ] && . "$${NVM_DIR}/nvm.sh"; \
	nvm ls

set-default-node: ## set default node
	@export NVM_DIR="$${HOME}/.nvm"; \
	[ -s "$${NVM_DIR}/nvm.sh" ] && . "$${NVM_DIR}/nvm.sh"; \
	nvm alias default node

init-husky: ## initialize husky
	@npx husky-init && npm install

init-eslint: ## initialize eslint
	@npm init @eslint/config

install-pipx: ## install pipx (pre-requisite for external tools)
	@pipx --version &> /dev/null || pip3 install --user pipx || true

install-copier: install-pipx ## install copier (pre-requisite for init-project)
	@copier --version &> /dev/null || pipx install copier || pip3 install --user copier || true

install-commitzen: install-pipx ## install commitzen (pre-requisite for commit)
	@cz version &> /dev/null || pipx install commitizen || pip3 install --user commitizen || true

install-precommit: install-commitzen ## install pre-commit
	@pre-commit --version &> /dev/null || pipx install pre-commit || pip3 install --user pre-commit || true

install-precommit-hooks: install-precommit ## install pre-commit hooks
	@pre-commit install

init-project: install-copier install-precommit-hooks ## initialize the project (Warning: do this only once!)
	@copier copy --trust gh:entelecheia/hyperfast-template .

{% if project_name == 'hyperfast-template' -%}
reinit-project: install-copier ## reinitialize the project (Warning: this may overwrite existing files!)
	@bash -c 'args=(); while IFS= read -r file; do args+=("--skip" "$$file"); done < .copierignore; copier copy "$${args[@]}" --answers-file .copier-config.yaml --trust --vcs-ref=HEAD . .'

reinit-project-force: install-copier ## initialize the project ignoring existing files (Warning: this will overwrite existing files!)
	@bash -c 'args=(); while IFS= read -r file; do args+=("--skip" "$$file"); done < .copierignore; copier copy "$${args[@]}" --answers-file .copier-config.yaml --trust --force --vcs-ref=HEAD . .'

test-init-project: install-copier ## test initializing the project to a temporary directory
	@copier copy --answers-file .copier-docker-config.yaml --trust --vcs-ref=HEAD . tmp
	@rm -rf tmp/.git

test-init-project-force: install-copier ## test initializing the project to a temporary directory forcing overwrite
	@copier copy --answers-file .copier-docker-config.yaml --trust --force --vcs-ref=HEAD . tmp
	@rm -rf tmp/.git
{% else -%}
reinit-project: install-copier ## reinitialize the project (Warning: this may overwrite existing files!)
	@bash -c 'args=(); while IFS= read -r file; do args+=("--skip" "$$file"); done < .copierignore; copier copy "$${args[@]}" --answers-file .copier-config.yaml --trust {%- if project_name.endswith('-template') %} --vcs-ref=HEAD{% endif %} gh:entelecheia/hyperfast-template .
{% endif -%}
